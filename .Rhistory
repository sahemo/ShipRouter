library(shiny)
library(tidyverse)
library(arrow)
library(shiny.semantic)
library(leaflet)
df <- read_csv_arrow("data/ships.csv", as_data_frame = FALSE)
df %>%
head() %>%
collect() %>%
glimpse()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
library(shiny)
runApp()
runApp()
runApp()
df <- read_csv_arrow("data/ship_arrow.csv", as_data_frame = TRUE, col_select = c("LAT", "LON", "LAT1", "LON1", "SHIPNAME", "ship_type", "distance", "DATETIME")) %>%
data.table::as.data.table() %>%
filter(!is.na(LON), !is.na(LAT)) %>%
group_by(SHIPNAME, ship_type) %>%
arrange(desc(distance), desc(DATETIME)) %>%
slice(n = 1) %>%
ungroup()
df
library(shiny)
library(tidyverse)
library(arrow)
library(shiny.semantic)
library(leaflet)
library(data.table)
showShipPopup <- function(df) {
selectedShip <- df
contents <- map_chr(seq(nrow(df)), ~{
as.character(tagList(
tags$strong(paste("Ship", selectedShip$SHIPNAME[.x], "has sailed", round(selectedShip$distance[.x]), "meters."))
))
}) %>% unlist()
return(contents)
}
df <- read_csv_arrow("data/ships.csv", as_data_frame = TRUE) %>%
filter(!is.na(LON), !is.na(LAT)) %>%
arrange(SHIPNAME, DATETIME) %>%
group_by(ship_type, SHIPNAME) %>%
mutate(LON1 = lag(LON), LAT1 = lag(LAT)) %>%
mutate(distance = get_geo_distance(long1 = `LON`, lat1 = `LAT`,
long2 = LON1, lat2 = LAT1, units = "meters")) %>%
arrange(desc(distance), desc(DATETIME)) %>%
slice(n = 1) %>%
ungroup()
get_geo_distance = function(long1, lat1, long2, lat2, units = "meters") {
loadNamespace("purrr")
loadNamespace("geosphere")
longlat1 = purrr::map2(long1, lat1, function(x,y) cbind(x,y))
longlat2 = purrr::map2(long2, lat2, function(x,y) cbind(x,y))
distance_list = purrr::map2(longlat1, longlat2, function(x,y) geosphere::distHaversine(x, y))
#distance_m = list_extract(distance_list, position = 1)
distance_m = sapply(distance_list, function(col) { col[1] })
if (units == "km") {
distance = distance_m / 1000.0;
}
else if (units == "miles") {
distance = distance_m / 1609.344
}
else {
distance = distance_m
# This will return in meter as same way as distHaversine function.
}
round(distance)
}
df <- read_csv_arrow("data/ships.csv", as_data_frame = TRUE) %>%
filter(!is.na(LON), !is.na(LAT)) %>%
arrange(SHIPNAME, DATETIME) %>%
group_by(ship_type, SHIPNAME) %>%
mutate(LON1 = lag(LON), LAT1 = lag(LAT)) %>%
mutate(distance = get_geo_distance(long1 = `LON`, lat1 = `LAT`,
long2 = LON1, lat2 = LAT1, units = "meters")) %>%
arrange(desc(distance), desc(DATETIME)) %>%
slice(n = 1) %>%
ungroup()
rm(list = ls())
library(shiny)
library(tidyverse)
library(arrow)
library(shiny.semantic)
library(leaflet)
library(data.table)
get_geo_distance = function(long1, lat1, long2, lat2, units = "meters") {
loadNamespace("purrr")
loadNamespace("geosphere")
longlat1 = purrr::map2(long1, lat1, function(x,y) cbind(x,y))
longlat2 = purrr::map2(long2, lat2, function(x,y) cbind(x,y))
distance_list = purrr::map2(longlat1, longlat2, function(x,y) geosphere::distHaversine(x, y))
#distance_m = list_extract(distance_list, position = 1)
distance_m = sapply(distance_list, function(col) { col[1] })
if (units == "km") {
distance = distance_m / 1000.0;
}
else if (units == "miles") {
distance = distance_m / 1609.344
}
else {
distance = distance_m
# This will return in meter as same way as distHaversine function.
}
round(distance)
}
showShipPopup <- function(df) {
selectedShip <- df
contents <- map_chr(seq(nrow(df)), ~{
as.character(tagList(
tags$strong(paste("Ship", selectedShip$SHIPNAME[.x], "has sailed", round(selectedShip$distance[.x]), "meters."))
))
}) %>% unlist()
return(contents)
}
read_csv_arrow("data/ships.csv", as_data_frame = TRUE, col_select = c("LAT", "LON", "LAT1", "LON1", "SHIPNAME", "ship_type", "distance", "DATETIME")) %>%
filter(!is.na(LON), !is.na(LAT))
read_csv_arrow("data/ships.csv", as_data_frame = TRUE, col_select = c("LAT", "LON", "SHIPNAME", "ship_type", "distance", "DATETIME")) %>%
filter(!is.na(LON), !is.na(LAT))
read_csv_arrow("data/ships.csv", as_data_frame = TRUE, col_select = c("LAT", "LON", "SHIPNAME", "ship_type", "DATETIME")) %>%
filter(!is.na(LON), !is.na(LAT))
read_csv_arrow("data/ships.csv", as_data_frame = FALSE, col_select = c("LAT", "LON", "SHIPNAME", "ship_type", "DATETIME")) %>%
filter(!is.na(LON), !is.na(LAT))
df <- read_csv_arrow("data/ships.csv", as_data_frame = FALSE, col_select = c("LAT", "LON", "SHIPNAME", "ship_type", "DATETIME")) %>%
filter(!is.na(LON), !is.na(LAT)) %>%
group_by(ship_type, SHIPNAME) %>%
mutate(LON1 = lag(LON), LAT1 = lag(LAT)) %>%
mutate(distance = get_geo_distance(long1 = `LON`, lat1 = `LAT`,
long2 = LON1, lat2 = LAT1, units = "meters")) %>%
arrange(desc(distance), desc(DATETIME)) %>%
slice(n = 1) %>%
ungroup() %>%
select(c("LAT", "LON", "LAT1", "LON1", "SHIPNAME", "ship_type", "distance", "DATETIME")) %>%
collect()
df %>%
write_csv_arrow("data/ship_arrow_v2.csv")
runApp()
df %>% filter(SHIPNAME == "BALTICA")
runApp()
runApp()
install.packages("semantic.dashbaord")
install.packages("semantic.dashboard")
install.packages("semantic.dashboard")
install.packages("semantic.dashboard")
library(shiny)
library(shinydashboard)
library(shiny.semantic)
library(tidyverse)
library(arrow)
library(leaflet)
library(data.table)
runApp()
runApp()
runApp()
?dashboardSidebar
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(waiter)
install.packages("waiter")
library(waiter)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(arrow)
library(leaflet)
library(waiter)
# Function for calculating distance between two points
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
spin_1()
?spin_1
runApp()
runApp()
runApp()
runApp()
runApp()
preview_spinner(spin_1())
preview_spinner(spin_2())
preview_spinner(spin_3())
preview_spinner(spin_4())
preview_spinner(spin_5())
preview_spinner(spin_6())
preview_spinner(spin_7())
preview_spinner(spin_inner_circles())
preview_spinner(spin_balance())
preview_spinner(spin_2())
runApp()
preview_spinner(spin_6())
preview_spinner(spin_5())
preview_spinner(spin_7())
preview_spinner(spin_4())
runApp()
runApp()
preview_spinner(spin_5())
runApp()
runApp()
runApp()
runApp()
